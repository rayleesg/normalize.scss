//////////////////////////////////////////////////////////////////////////////////////////
//
// CSSIONS TYPO CORE
//
//////////////////////////////////////////////////////////////////////////////////////////

// cssions typo settings 
//////////////////////////////////////////////////////////////

// Get Settings
@function typo-get($part,$setting) {
    @return map-get(map-get($cssions-typo-settings, $part), $setting);
}

@function typo-headers-get($headers,$part,$setting) {
    @return map-get(map-get(map-get($cssions-typo-settings, $headers), $part), $setting);
}

// Get Settings
@function fontface-get($part,$setting) {
    @return map-get(map-get($cssions-fontface-settings, $part), $setting);
}


// cssions cross-modules
//////////////////////////////////////////////////////////////

//$normalize:map-set-deep($cssions-normalize-settings, ("base" "html"), false);

//$meyer:if(variable-exists("cssions-meyer-settings"),meyer-set("body line height",false),null);
//$normalize:if(variable-exists("cssions-normalize-settings"),normalize-set("text level semantics","abbr",false),null);


// cssions Typo mixin : Font size init
//////////////////////////////////////////////////////////////

@mixin font-size-calc($font-size, $font-size-context) {

	@if typo-get("base", "unit value") == px {
		font-size: #{$font-size}px;
	}

	@if typo-get("base", "unit value") == em {
		font-size:#{$font-size / $font-size-context}em;
	}

	@if typo-get("base", "unit value") == rem {
	    @if typo-get("base", "unit value fallback") == px {
	    	font-size: #{$font-size}px;
	    }
	    @if typo-get("base", "unit value fallback") == em {
	    	font-size:#{$font-size / $font-size-context}em;
	    }
	    font-size:#{$font-size / 10}rem; 
	}

}


// cssions Typo mixin : line height
//////////////////////////////////////////////////////////////

@mixin line-height-calc($font-size, $vertical-rythm-height:auto) {


	@if typo-get("base", "unit value") == px {
		line-height:#{$vertical-rythm-height * typo-get("vertical rythm", "size")}px;
	}

	@if typo-get("base", "unit value") == em {
		line-height:#{$vertical-rythm-height * typo-get("vertical rythm", "size") / $font-size}em;
	}	

	@if typo-get("base", "unit value") == rem {
	    @if typo-get("base", "unit value fallback") == px {
	    	line-height:#{$vertical-rythm-height * typo-get("vertical rythm", "size")}px;
	    }
	    @if typo-get("base", "unit value fallback") == em {
	    	line-height:#{$vertical-rythm-height * typo-get("vertical rythm", "size") / $font-size}em;
	    }
	    line-height:#{$vertical-rythm-height * typo-get("vertical rythm", "size") / 10}rem;
	}

}

@mixin line-height($font-size, $vertical-rythm-height:auto) {

	$ratio: $font-size / typo-get("vertical rythm", "size");

	@if $vertical-rythm-height == auto {
		@for $i from 0 through 10 {
			@if ( $ratio > $i and $ratio <= ($i + 1) ) {
			  @include line-height-calc($font-size,$i+1);
			}
		}
	}
	@else {
		@include line-height-calc($font-size,$vertical-rythm-height);
	}

}


// cssions Typo mixin : Font size init
//////////////////////////////////////////////////////////////

@mixin font-size($font-size, $font-size-context, $vertical-rythm-height:auto) {

	@include font-size-calc($font-size, $font-size-context);

	@if typo-get("options", "vertical rythm") {
		@include line-height($font-size, $vertical-rythm-height);
	}

}


// cssions Typo function : Font size init
//////////////////////////////////////////////////////////////

@function mp($nb,$font-size,$unitvalue) {

	@if $unitvalue == px {
		@return #{typo-get("vertical rythm", "size") * $nb}px;
	}

	@if $unitvalue == em {
		@return #{typo-get("vertical rythm", "size") * $nb / $font-size}em;
	}

	@if $unitvalue == rem {
		@return #{typo-get("vertical rythm", "size") * $nb / 10}rem;
	}

}


// cssions Typo mixin : margin
//////////////////////////////////////////////////////////////

@mixin margin($side,$nb,$font-size:typo-get("base", "default font size")) {

	@if typo-get("base", "unit value") == rem {
	    margin-#{$side}:mp($nb,$font-size,typo-get("base", "unit value fallback"));
	    margin-#{$side}:mp($nb,$font-size,typo-get("base", "unit value"));
	}

	@else {
		margin-#{$side}:mp($nb,$font-size,typo-get("base", "unit value"));
	}

}


// cssions Typo mixin : padding
//////////////////////////////////////////////////////////////

@mixin padding($side,$nb,$font-size:typo-get("base", "default font size")) {

	@if typo-get("base", "unit value") == rem {
	    padding-#{$side}:mp($nb,$font-size,typo-get("base", "unit value fallback"));
	    padding-#{$side}:mp($nb,$font-size,typo-get("base", "unit value"));
	}

	@else {
		padding-#{$side}:mp($nb,$font-size,typo-get("base", "unit value"));
	}

}

